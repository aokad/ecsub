#! /usr/bin/env python
# -*- coding: utf-8 -*-

"""
Created on Wed Mar 14 11:53:04 2018

@author: Okada
"""

import sys
import argparse
import ecsub.submit as submit
import ecsub.delete as delete
import ecsub.report as report
import ecsub.log as log
from ecsub import __version__

def main():
    prog = "ecsub"
    parser = argparse.ArgumentParser(prog = prog)
    parser.add_argument("--version", action = "version", version = prog + "-" + __version__)
    subparsers = parser.add_subparsers()
    
    ##########
    # submit 
    submit_parser = subparsers.add_parser("submit", help = "submit job")
    submit_parser.add_argument("--wdir", metavar = "path/to/dir", help = "output temporary data", type = str, default = "./")
    submit_parser.add_argument("--image", metavar = "docker/image:tag", help = "docker image", type = str, default = "python:2.7.14")
    submit_parser.add_argument("--use_amazon_ecr", help = "use_amazon_ecr", action = 'store_true')
    submit_parser.add_argument("--shell", metavar = "path/to/bash", help = "path to bash or ash in docker-container", type = str, default = "/bin/bash")
    submit_parser.add_argument("--script", metavar = "path/to/script.sh", help = "run script", type = str, required=True)
    submit_parser.add_argument("--tasks", metavar = "path/to/tasks.tsv", help = "parameters", type = str, required=True)
    submit_parser.add_argument("--task-name", metavar = "task-name", help = "submit name as AWS ECS cluster name", type = str, default = "")
    submit_parser.add_argument("--aws-s3-bucket", metavar = "s3://output/bucket", help = "AWS your S3 bucket", type = str, required=True)
    submit_parser.add_argument("--aws-ec2-instance-type", metavar = "t2.micro", help = "AWS instance type", type = str, default = "")
    submit_parser.add_argument("--aws-ec2-instance-type-list", metavar = "t3.micro,t2.micro", help = "AWS instance types, split with ',' ", type = str, default = "")
    submit_parser.add_argument("--disk-size", metavar = 22, help = "AWS disk size (GiB)", type = int, default = 22)
    submit_parser.add_argument("--processes", metavar = 20, help = "multi process max num", type = int, default = 20)
    submit_parser.add_argument("--memory", metavar = 8, help = "Memory used by AWS ECS task (MB)", type = int, default = 0)
    submit_parser.add_argument("--vcpu", metavar = 1, help = "vCpu used by AWS ECS task", type = int, default = 0)
    submit_parser.add_argument("--aws-security-group-id", metavar = "sg-ab123456", help = "AWS your security_group_id", type = str, default = "")
    submit_parser.add_argument("--aws-key-name", metavar = "key-123ab", help = "AWS your key pair name", type = str, default = "")
    submit_parser.add_argument("--aws-subnet-id", metavar = "subnet-123456ab", help = "AWS subnet_id", type = str, default = "")
    submit_parser.add_argument("--spot", help = "[spot] use spot instance", action = 'store_true')
    submit_parser.add_argument("--retry-od", help = "[spot] In case of failure, retry on demand instance", action = 'store_true')
    submit_parser.set_defaults(func = submit.entry_point)
    
    ##########
    # report 
    report_parser = subparsers.add_parser("report", help = "view report")
    report_parser.add_argument("--wdir", metavar = "path/to/dir", help = "{PATH} when 'ecsub submit --wdir {PATH}'", type = str, default = "./")
    report_parser.add_argument("--past", help = "display summary in previous version.", action = 'store_true')
    report_parser.add_argument("-f", "--failed", help = "display failed or abnoraml exit status job only.", action = 'store_true')
    report_parser.add_argument("-b", "--begin", metavar = "[YYYYMMDDhhmm]", help = "The earliest createdAt time for jobs to be summarized, in the format [YYYYMMDDhhmm]", type = str, default = "")
    report_parser.add_argument("-e", "--end", metavar = "[YYYYMMDDhhmm]", help = "The latest createdAt time for jobs to be summarized, in the format [YYYYMMDDhhmm]", type = str, default = "")
    report_parser.add_argument("--max", metavar = "20", help = "Maximum display count", type = int, default = 0)
    report_parser.set_defaults(func = report.entry_point)
    
    ##########
    # delete
    delete_parser = subparsers.add_parser("delete", help = "delete job")
    delete_parser.add_argument("task_name", metavar = "task-name", help = "task name", type = str)
    delete_parser.add_argument("--wdir", metavar = "path/to/dir", help = "{PATH} when 'ecsub submit --wdir {PATH}'", type = str, default = "./")
    delete_parser.set_defaults(func = delete.entry_point)
    
    ##########
    # log stream 
    log_parser = subparsers.add_parser("logs", help = "download logs")
    log_parser.add_argument("--wdir", metavar = "path/to/dir", help = "{PATH} when 'ecsub submit --wdir {PATH}'", type = str, default = "./")
    log_parser.add_argument("--prefix", metavar = "task-name", help = "prefix of LogGroupName in AWS CloudWatch", type = str, default = "")
    log_parser.add_argument("--rm", help = "flag for remove from AWS", action = 'store_true')
    log_parser.add_argument("--dw", help = "flag for download from AWS", action = 'store_true')
    log_parser.set_defaults(func = log.entry_point)
    
    argv = sys.argv[1:]
    if len(argv) < 1:
        argv = [""]
        
    (known_args, unknown_args) = parser.parse_known_args(argv)
    if len(unknown_args) > 0:
        if '' in unknown_args:
            unknown_args.remove('')
        if len(unknown_args) > 0:
            print ("This option is invalid.")
            print (unknown_args)
    
    return known_args.func(known_args, unknown_args)
    
if __name__ == "__main__":
    sys.exit(main())
