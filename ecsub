# -*- coding: utf-8 -*-
"""
Created on Wed Mar 14 11:53:04 2018

@author: Okada
"""

import argparse
import ecsub.submit as submit
import ecsub.report as report

def main():
    
    parser = argparse.ArgumentParser(prog = "ecsub")
    parser.add_argument("--version", action = "version", version = '%(prog)s 0.0.1')
    subparsers = parser.add_subparsers()
    
    ##########
    # submit 
    submit_parser = subparsers.add_parser("submit", help = "submit job")
    submit_parser.add_argument("--wdir", help = "output temporary data", type = str, default = "./")
    submit_parser.add_argument("--image", help = "docker image", type = str, default = "python:2.7.14")
    submit_parser.add_argument("--use_amazon_ecr", help = "use_amazon_ecr", action = 'store_true')
    submit_parser.add_argument("--shell", help = "path to bash or ash in docker-container", type = str, default = "/bin/bash")
    submit_parser.add_argument("--script", help = "run script", type = str, required=True)
    submit_parser.add_argument("--tasks", help = "parameters", type = str, required=True)
    submit_parser.add_argument("--aws-s3-bucket", help = "AWS your S3 bucket", type = str, required=True)
    submit_parser.add_argument("--aws-ec2-instance-type", help = "AWS instance type", type = str, default = "t2.micro")
    submit_parser.add_argument("--disk-size", help = "AWS disk size", type = int, default = 22)
    submit_parser.add_argument("--aws-security-group-id", help = "AWS your security_group_id", type = str, default = "")
    submit_parser.add_argument("--aws-key-name", help = "AWS your key pair name", type = str, default = "")
    submit_parser.set_defaults(func = submit.entry_point)
    
    ##########
    # report 
    report_parser = subparsers.add_parser("report", help = "view report")
    report_parser.add_argument("wdir", help = "{PATH} when 'ecsub submit --wdir {PATH}'", type = str, default = "")
    report_parser.set_defaults(func = report.entry_point)
    
    import sys
    argv = sys.argv[1:]
    if len(argv) < 1:
        argv = [""]
        
    (known_args, unknown_args) = parser.parse_known_args(argv)
    if len(unknown_args) > 0:
        print ("This option is invalid.")
        print (unknown_args)
    
    return known_args.func(known_args)
    
if __name__ == "__main__":
    main()

